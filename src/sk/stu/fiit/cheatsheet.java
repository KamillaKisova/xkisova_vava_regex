/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package sk.stu.fiit;

import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;

/**
 *
 * @author KamillaKisova
 */
public class cheatsheet extends javax.swing.JFrame {

    /**
     * Creates new form cheatsheet
     */
    public cheatsheet() {
        initComponents();
        
        String[] character = { "\\", "^", "$", "*", "+", "?", ".",
            "( subexpression )", "x | y", "{ n }", "{ n, }", "{ n,m }",
            "[ xyz ]", "[^ xyz ]", "[ a-z ]", "[^ m-z ]", "\\b", "\\B",
            "\\d", "\\D", "\\f", "\\n", "\\r", "\\s", "\\S", "\\t",
            "\\v", "\\w", "\\W"
        };
        
        String[] description = { "Marks the next character as either a special "
                + "character or a literal.",
            "Matches the beginning of input.",
            "Matches the end of input.",
            "Matches the preceding character zero or more times.",
            "Matches the preceding character one or more times.",
            "Matches the preceding character zero or one time.",
            "Matches any single character except a newline character.",
            "Matches subexpression and remembers the match.",
            "Matches either x or y.",
            "n is a non negative integer. Matches exactly n times.",
            "n is a non negative integer. Matches at least n times.",
            "m and n are nonnegative integers. Matches at least n and at most "
                + "m times.",
            "A character set. Matches any one of the enclosed characters.",
            "A negative character set. Matches any character not enclosed.",
            "A range of characters. Matches any character in the specified "
                + "range.",
            "A negative range characters. Matches any character not in the "
                + "specified range.",
            "Matches a word boundary, that is, the position between a word "
                + "and a space.",
            "Matches a non-word boundary.",
            "Matches a digit character. Equivalent to [0-9].",
            "Matches a non-digit character. Equivalent to [^0-9].",
            "Matches a form-feed character.",
            "Matches a newline character.",
            "Matches a carriage return character.",
            "Matches any white space including space, tab, form-feed, "
                + "and so on. Equivalent to [ \\f\\n\\r\\t\\v].",
            "Matches any nonwhite space character. Equivalent to "
                + "[^ \\f\\n\\r\\t\\v].",
            "Matches a tab character.",
            "Matches a vertical tab character.",
            "Matches any word character including underscore. Equivalent "
                + "to [A-Za-z0 -9_].",
            "Matches any non-word character. Equivalent to [^A-Za-z0-9_]."
        };
        
        DefaultTableModel tableModel = new DefaultTableModel(
                new String[]{"Character", "Description"}, 0
        );
        for (int i = 0; i < character.length; i++) {
            tableModel.addRow(new Object[]{
                character[i], description[i]
            });
        }
        table.setModel(tableModel);
        table.getColumnModel().getColumn(0).setPreferredWidth(10);
        table.getColumnModel().getColumn(1).setPreferredWidth(280);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        regexLabel = new javax.swing.JLabel();
        scrollPane = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        regexLabel.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        regexLabel.setText("RegEx syntax reference");
        jPanel1.add(regexLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, -1, -1));

        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        scrollPane.setViewportView(table);

        jPanel1.add(scrollPane, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 50, 750, 440));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 780, 520));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(cheatsheet.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(cheatsheet.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(cheatsheet.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(cheatsheet.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new cheatsheet().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel regexLabel;
    private javax.swing.JScrollPane scrollPane;
    private javax.swing.JTable table;
    // End of variables declaration//GEN-END:variables
}
